// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using CollabSphere.Domain.Entities;
using CollabSphere.Domain.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace CollabSphere.Infrastructure.PostgreDbContext;

public partial class collab_sphereContext : DbContext
{
    public collab_sphereContext(DbContextOptions<collab_sphereContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AnswerEvaluation> AnswerEvaluations { get; set; }

    public virtual DbSet<Card> Cards { get; set; }

    public virtual DbSet<CardAssignment> CardAssignments { get; set; }

    public virtual DbSet<ChatConversation> ChatConversations { get; set; }

    public virtual DbSet<ChatMessage> ChatMessages { get; set; }

    public virtual DbSet<Checkpoint> Checkpoints { get; set; }

    public virtual DbSet<CheckpointAssignment> CheckpointAssignments { get; set; }

    public virtual DbSet<CheckpointFile> CheckpointFiles { get; set; }

    public virtual DbSet<Class> Classes { get; set; }

    public virtual DbSet<ClassFile> ClassFiles { get; set; }

    public virtual DbSet<ClassMember> ClassMembers { get; set; }

    public virtual DbSet<EvaluationDetail> EvaluationDetails { get; set; }

    public virtual DbSet<Lecturer> Lecturers { get; set; }

    public virtual DbSet<List> Lists { get; set; }

    public virtual DbSet<Meeting> Meetings { get; set; }

    public virtual DbSet<MemberEvaluation> MemberEvaluations { get; set; }

    public virtual DbSet<MessageRecipient> MessageRecipients { get; set; }

    public virtual DbSet<MilestoneEvaluation> MilestoneEvaluations { get; set; }

    public virtual DbSet<MilestoneFile> MilestoneFiles { get; set; }

    public virtual DbSet<MilestoneQuestion> MilestoneQuestions { get; set; }

    public virtual DbSet<MilestoneQuestionAn> MilestoneQuestionAns { get; set; }

    public virtual DbSet<MilestoneReturn> MilestoneReturns { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<NotificationRecipient> NotificationRecipients { get; set; }

    public virtual DbSet<Objective> Objectives { get; set; }

    public virtual DbSet<ObjectiveMilestone> ObjectiveMilestones { get; set; }

    public virtual DbSet<Project> Projects { get; set; }

    public virtual DbSet<ProjectAssignment> ProjectAssignments { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Semester> Semesters { get; set; }

    public virtual DbSet<Shape> Shapes { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<SubTask> SubTasks { get; set; }

    public virtual DbSet<Subject> Subjects { get; set; }

    public virtual DbSet<SubjectGradeComponent> SubjectGradeComponents { get; set; }

    public virtual DbSet<SubjectOutcome> SubjectOutcomes { get; set; }

    public virtual DbSet<SubjectSyllabus> SubjectSyllabi { get; set; }

    public virtual DbSet<Domain.Models.Task> Tasks { get; set; }

    public virtual DbSet<Team> Teams { get; set; }

    public virtual DbSet<TeamEvaluation> TeamEvaluations { get; set; }

    public virtual DbSet<TeamFile> TeamFiles { get; set; }

    public virtual DbSet<TeamMilestone> TeamMilestones { get; set; }

    public virtual DbSet<TeamWhiteboard> TeamWhiteboards { get; set; }

    public virtual DbSet<TeamWorkspace> TeamWorkspaces { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<WhiteboardPage> WhiteboardPages { get; set; }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AnswerEvaluation>(entity =>
        {
            entity.HasKey(e => e.AnswerEvaluationId).HasName("answer_evaluation_pk");

            entity.ToTable("answer_evaluation");

            entity.Property(e => e.AnswerEvaluationId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("answer_evaluation_id");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_date");
            entity.Property(e => e.EvaluatorId).HasColumnName("evaluator_id");
            entity.Property(e => e.MilestoneQuestionAnsId).HasColumnName("milestone_question_ans_id");
            entity.Property(e => e.ReceiverId).HasColumnName("receiver_id");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.TeamId).HasColumnName("team_id");

            entity.HasOne(d => d.Evaluator).WithMany(p => p.AnswerEvaluations)
                .HasForeignKey(d => d.EvaluatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("answer_evaluation_lecturer_fk");

            entity.HasOne(d => d.EvaluatorNavigation).WithMany(p => p.AnswerEvaluationEvaluatorNavigations)
                .HasForeignKey(d => d.EvaluatorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("answer_evaluator_evaluation_student_FK");

            entity.HasOne(d => d.MilestoneQuestionAns).WithMany(p => p.AnswerEvaluations)
                .HasForeignKey(d => d.MilestoneQuestionAnsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("answer_evaluation_milestone_question_ans_fk");

            entity.HasOne(d => d.Receiver).WithMany(p => p.AnswerEvaluationReceivers)
                .HasForeignKey(d => d.ReceiverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("answer_receiver_evaluation_student_FK");
        });

        modelBuilder.Entity<Card>(entity =>
        {
            entity.HasKey(e => e.CardId).HasName("card_pk");

            entity.ToTable("card");

            entity.Property(e => e.CardId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("card_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.DueAt).HasColumnName("due_at");
            entity.Property(e => e.IsCompleted).HasColumnName("is_completed");
            entity.Property(e => e.Labels).HasColumnName("labels");
            entity.Property(e => e.ListId).HasColumnName("list_id");
            entity.Property(e => e.RiskLevel)
                .IsRequired()
                .HasColumnName("risk_level");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasColumnName("title");

            entity.HasOne(d => d.List).WithMany(p => p.Cards)
                .HasForeignKey(d => d.ListId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("card_list_fk");
        });

        modelBuilder.Entity<CardAssignment>(entity =>
        {
            entity.HasKey(e => new { e.CardId, e.StudentId }).HasName("card_assignment_pkey");

            entity.ToTable("card_assignment");

            entity.Property(e => e.CardId).HasColumnName("card_id");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.Avatar).HasColumnName("avatar");
            entity.Property(e => e.StudentName).HasColumnName("student_name");

            entity.HasOne(d => d.Card).WithMany(p => p.CardAssignments)
                .HasForeignKey(d => d.CardId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("card_assignment_card_fk");
        });

        modelBuilder.Entity<ChatConversation>(entity =>
        {
            entity.HasKey(e => e.ConversationId).HasName("chat_conversation_pk");

            entity.ToTable("chat_conversation");

            entity.Property(e => e.ConversationId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("conversation_id");
            entity.Property(e => e.ConversationName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("conversation_name");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.LatestMessage).HasColumnName("latest_message");
            entity.Property(e => e.TeamId).HasColumnName("team_id");

            entity.HasOne(d => d.Team).WithMany(p => p.ChatConversations)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("chat_conversation_team_fk");
        });

        modelBuilder.Entity<ChatMessage>(entity =>
        {
            entity.HasKey(e => e.MessageId).HasName("chat_message_pk");

            entity.ToTable("chat_message");

            entity.Property(e => e.MessageId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("message_id");
            entity.Property(e => e.ConversationId).HasColumnName("conversation_id");
            entity.Property(e => e.Message).HasColumnName("message");
            entity.Property(e => e.SendAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("send_at");
            entity.Property(e => e.SenderId).HasColumnName("sender_id");

            entity.HasOne(d => d.Conversation).WithMany(p => p.ChatMessages)
                .HasForeignKey(d => d.ConversationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("chat_message_chat_conversation_fk");

            entity.HasOne(d => d.Sender).WithMany(p => p.ChatMessages)
                .HasForeignKey(d => d.SenderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("chat_message_user_fk");
        });

        modelBuilder.Entity<Checkpoint>(entity =>
        {
            entity.HasKey(e => e.CheckpointId).HasName("checkpoint_pk");

            entity.ToTable("checkpoint");

            entity.Property(e => e.CheckpointId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("checkpoint_id");
            entity.Property(e => e.Complexity).HasColumnName("complexity");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.DueDate).HasColumnName("due_date");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasComment("0 - not done , 1 - done")
                .HasColumnName("status");
            entity.Property(e => e.TeamMilestoneId).HasColumnName("team_milestone_id");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("title");

            entity.HasOne(d => d.TeamMilestone).WithMany(p => p.Checkpoints)
                .HasForeignKey(d => d.TeamMilestoneId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("checkpoint_team_milestone_fk");
        });

        modelBuilder.Entity<CheckpointAssignment>(entity =>
        {
            entity.HasKey(e => e.CheckpointAssignmentId).HasName("checkpoint_assignment_pk");

            entity.ToTable("checkpoint_assignment");

            entity.Property(e => e.CheckpointAssignmentId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("checkpoint_assignment_id");
            entity.Property(e => e.AssignedDate)
                .HasDefaultValueSql("now()")
                .HasColumnName("assigned_date");
            entity.Property(e => e.CheckpointId).HasColumnName("checkpoint_id");
            entity.Property(e => e.ClassMemberId).HasColumnName("class_member_id");

            entity.HasOne(d => d.Checkpoint).WithMany(p => p.CheckpointAssignments)
                .HasForeignKey(d => d.CheckpointId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("checkpoint_assignment_checkpoint_fk");

            entity.HasOne(d => d.ClassMember).WithMany(p => p.CheckpointAssignments)
                .HasForeignKey(d => d.ClassMemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("checkpoint_assignment_class_member_fk");
        });

        modelBuilder.Entity<CheckpointFile>(entity =>
        {
            entity.HasKey(e => e.FileId).HasName("checkpoint_file_pk");

            entity.ToTable("checkpoint_file");

            entity.Property(e => e.FileId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("file_id");
            entity.Property(e => e.CheckpointId).HasColumnName("checkpoint_id");
            entity.Property(e => e.FilePath)
                .IsRequired()
                .HasColumnName("file_path");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .HasColumnName("type");

            entity.HasOne(d => d.Checkpoint).WithMany(p => p.CheckpointFiles)
                .HasForeignKey(d => d.CheckpointId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("checkpoint_file_checkpoint_fk");
        });

        modelBuilder.Entity<Class>(entity =>
        {
            entity.HasKey(e => e.ClassId).HasName("class_pk");

            entity.ToTable("class");

            entity.Property(e => e.ClassId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("class_id");
            entity.Property(e => e.ClassName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("class_name");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_date");
            entity.Property(e => e.EnrolKey)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("enrol_key");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.LecturerId).HasColumnName("lecturer_id");
            entity.Property(e => e.LecturerName)
                .HasMaxLength(150)
                .HasColumnName("lecturer_name");
            entity.Property(e => e.MemberCount).HasColumnName("member_count");
            entity.Property(e => e.SubjectId).HasColumnName("subject_id");
            entity.Property(e => e.SemesterId).HasColumnName("semester_id");
            entity.Property(e => e.TeamCount).HasColumnName("team_count");

            entity.HasOne(d => d.Lecturer).WithMany(p => p.Classes)
                .HasForeignKey(d => d.LecturerId)
                .HasConstraintName("class_lecturer_fk");

            entity.HasOne(d => d.Subject).WithMany(p => p.Classes)
                .HasForeignKey(d => d.SubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("class_subject_fk");

            entity.HasOne(d => d.Semester).WithMany(p => p.Classes)
                .HasForeignKey(d => d.SemesterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("class_semester_fk");
        });

        modelBuilder.Entity<ClassFile>(entity =>
        {
            entity.HasKey(e => e.FileId).HasName("class_file_pk");

            entity.ToTable("class_file");

            entity.Property(e => e.FileId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("file_id");
            entity.Property(e => e.ClassId).HasColumnName("class_id");
            entity.Property(e => e.FilePath).HasColumnName("file_path");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .HasColumnName("type");

            entity.HasOne(d => d.Class).WithMany(p => p.ClassFiles)
                .HasForeignKey(d => d.ClassId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("class_file_class_fk");
        });

        modelBuilder.Entity<ClassMember>(entity =>
        {
            entity.HasKey(e => e.ClassMemberId).HasName("class_member_pk");

            entity.ToTable("class_member");

            entity.Property(e => e.ClassMemberId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("class_member_id");
            entity.Property(e => e.ClassId).HasColumnName("class_id");
            entity.Property(e => e.Fullname)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("fullname");
            entity.Property(e => e.IsGrouped)
                .HasDefaultValue(false)
                .HasColumnName("is_grouped");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.TeamRole).HasColumnName("team_role");

            entity.HasOne(d => d.Class).WithMany(p => p.ClassMembers)
                .HasForeignKey(d => d.ClassId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("class_member_class_fk");

            entity.HasOne(d => d.Student).WithMany(p => p.ClassMembers)
                .HasForeignKey(d => d.StudentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("class_member_student_fk");

            entity.HasOne(d => d.Team).WithMany(p => p.ClassMembers)
                .HasForeignKey(d => d.TeamId)
                .HasConstraintName("class_member_team_fk");
        });

        modelBuilder.Entity<EvaluationDetail>(entity =>
        {
            entity.HasKey(e => e.EvaluationDetailId).HasName("evaluation_detail_pk");

            entity.ToTable("evaluation_detail");

            entity.Property(e => e.EvaluationDetailId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("evaluation_detail_id");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.Percentage).HasColumnName("percentage");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.SubjectGradeComponentId).HasColumnName("subject_grade_component_id");
            entity.Property(e => e.TeamEvaluationId).HasColumnName("team_evaluation_id");

            entity.HasOne(d => d.TeamEvaluation).WithMany(p => p.EvaluationDetails)
                .HasForeignKey(d => d.TeamEvaluationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("evaluation_detail_team_evaluation_fk");
        });

        modelBuilder.Entity<Lecturer>(entity =>
        {
            entity.HasKey(e => e.LecturerId).HasName("lecturer_pk");

            entity.ToTable("lecturer");

            entity.Property(e => e.LecturerId)
                .ValueGeneratedNever()
                .HasColumnName("lecturer_id");
            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.AvatarImg).HasColumnName("avatar_img");
            entity.Property(e => e.Fullname)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("fullname");
            entity.Property(e => e.LecturerCode)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("lecturer_code");
            entity.Property(e => e.Major).HasColumnName("major");
            entity.Property(e => e.PhoneNumber).HasColumnName("phone_number");
            entity.Property(e => e.School).HasColumnName("school");
            entity.Property(e => e.Yob).HasColumnName("yob");

            entity.HasOne(d => d.LecturerNavigation).WithOne(p => p.Lecturer)
                .HasForeignKey<Lecturer>(d => d.LecturerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("lecturer_user_fk");
        });

        modelBuilder.Entity<List>(entity =>
        {
            entity.HasKey(e => e.ListId).HasName("list_pk");

            entity.ToTable("list");

            entity.Property(e => e.ListId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("list_id");
            entity.Property(e => e.Title).HasColumnName("title");
            entity.Property(e => e.WorkspaceId).HasColumnName("workspace_id");

            entity.HasOne(d => d.Workspace).WithMany(p => p.Lists)
                .HasForeignKey(d => d.WorkspaceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("list_team_workspace_fk");
        });

        modelBuilder.Entity<Meeting>(entity =>
        {
            entity.HasKey(e => e.MeetingId).HasName("meeting_pk");

            entity.ToTable("meeting");

            entity.Property(e => e.MeetingId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("meeting_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.CreatedBy).HasColumnName("created_by");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.ScheduleTime).HasColumnName("schedule_time");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("title");

            entity.HasOne(d => d.Team).WithMany(p => p.Meetings)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("meeting_team_fk");
        });

        modelBuilder.Entity<MemberEvaluation>(entity =>
        {
            entity.HasKey(e => e.MemberEvaluationId).HasName("member_evaluation_pk");

            entity.ToTable("member_evaluation");

            entity.Property(e => e.MemberEvaluationId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("member_evaluation_id");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.RaterId).HasColumnName("rater_id");
            entity.Property(e => e.ReceiverId).HasColumnName("receiver_id");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.TeamId).HasColumnName("team_id");

            entity.HasOne(d => d.Rater).WithMany(p => p.MemberEvaluationRaters)
                .HasForeignKey(d => d.RaterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("member_evaluation_rater_class_member_FK");

            entity.HasOne(d => d.Receiver).WithMany(p => p.MemberEvaluationReceivers)
                .HasForeignKey(d => d.ReceiverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("member_evaluation_receiver_class_member_FK");

            entity.HasOne(d => d.Team).WithMany(p => p.MemberEvaluations)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("member_evaluation_team_fk");
        });

        modelBuilder.Entity<MessageRecipient>(entity =>
        {
            entity.HasKey(e => e.MessageRecipientId).HasName("message_recipient_pk");

            entity.ToTable("message_recipient");

            entity.Property(e => e.MessageRecipientId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("message_recipient_id");
            entity.Property(e => e.IsRead)
                .HasDefaultValue(false)
                .HasColumnName("is_read");
            entity.Property(e => e.MessageId).HasColumnName("message_id");
            entity.Property(e => e.ReadAt).HasColumnName("read_at");
            entity.Property(e => e.ReceiverId).HasColumnName("receiver_id");

            entity.HasOne(d => d.Message).WithMany(p => p.MessageRecipients)
                .HasForeignKey(d => d.MessageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("message_recipient_chat_message_fk");

            entity.HasOne(d => d.Receiver).WithMany(p => p.MessageRecipients)
                .HasForeignKey(d => d.ReceiverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("message_recipient_user_fk");
        });

        modelBuilder.Entity<MilestoneEvaluation>(entity =>
        {
            entity.HasKey(e => new { e.MilestoneId, e.LecturerId }).HasName("pk_milestone_evaluation");

            entity.ToTable("milestone_evaluation");

            entity.Property(e => e.MilestoneId).HasColumnName("milestone_id");
            entity.Property(e => e.LecturerId).HasColumnName("lecturer_id");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_date");
            entity.Property(e => e.Score).HasColumnName("score");
            entity.Property(e => e.TeamId).HasColumnName("team_id");

            entity.HasOne(d => d.Lecturer).WithMany(p => p.MilestoneEvaluations)
                .HasForeignKey(d => d.LecturerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("milestone_evaluation_lecturer_fk");

            entity.HasOne(d => d.Milestone).WithOne(p => p.MilestoneEvaluation)
                .HasForeignKey<MilestoneEvaluation>(d => d.MilestoneId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("milestone_evaluation_team_milestone_fk");

            entity.HasOne(d => d.Team).WithMany(p => p.MilestoneEvaluations)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("milestone_evaluation_team_fk");
        });

        modelBuilder.Entity<MilestoneFile>(entity =>
        {
            entity.HasKey(e => e.FileId).HasName("milestone_file_pk");

            entity.ToTable("milestone_file");

            entity.Property(e => e.FileId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("file_id");
            entity.Property(e => e.FilePath).HasColumnName("file_path");
            entity.Property(e => e.TeamMilstoneId).HasColumnName("team_milstone_id");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .HasColumnName("type");

            entity.HasOne(d => d.TeamMilstone).WithMany(p => p.MilestoneFiles)
                .HasForeignKey(d => d.TeamMilstoneId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("milestone_file_team_milestone_fk");
        });

        modelBuilder.Entity<MilestoneQuestion>(entity =>
        {
            entity.HasKey(e => e.MilestoneQuestionId).HasName("milestone_question_pk");

            entity.ToTable("milestone_question");

            entity.Property(e => e.MilestoneQuestionId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("milestone_question_id");
            entity.Property(e => e.AnswerCount).HasColumnName("answer_count");
            entity.Property(e => e.CreatedTime)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_time");
            entity.Property(e => e.Question)
                .IsRequired()
                .HasColumnName("question");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.TeamMilestoneId).HasColumnName("team_milestone_id");

            entity.HasOne(d => d.TeamMilestone).WithMany(p => p.MilestoneQuestions)
                .HasForeignKey(d => d.TeamMilestoneId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("milestone_question_team_milestone_fk");
        });

        modelBuilder.Entity<MilestoneQuestionAn>(entity =>
        {
            entity.HasKey(e => e.MilestoneQuestionAnsId).HasName("milestone_question_ans_pk");

            entity.ToTable("milestone_question_ans");

            entity.Property(e => e.MilestoneQuestionAnsId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("milestone_question_ans_id");
            entity.Property(e => e.Answer)
                .IsRequired()
                .HasColumnName("answer");
            entity.Property(e => e.ClassMemberId).HasColumnName("class_member_id");
            entity.Property(e => e.CreatedTime)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_time");
            entity.Property(e => e.MilestoneQuestionId).HasColumnName("milestone_question_id");
            entity.Property(e => e.TeamId).HasColumnName("team_id");

            entity.HasOne(d => d.ClassMember).WithMany(p => p.MilestoneQuestionAns)
                .HasForeignKey(d => d.ClassMemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("milestone_question_ans_class_member_fk");

            entity.HasOne(d => d.MilestoneQuestion).WithMany(p => p.MilestoneQuestionAns)
                .HasForeignKey(d => d.MilestoneQuestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("milestone_question_ans_milestone_question_fk");
        });

        modelBuilder.Entity<MilestoneReturn>(entity =>
        {
            entity.HasKey(e => e.MileReturnId).HasName("milestone_return_pk");

            entity.ToTable("milestone_return");

            entity.Property(e => e.MileReturnId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("mile_return_id");
            entity.Property(e => e.ClassMemberId).HasColumnName("class_member_id");
            entity.Property(e => e.FilePath).HasColumnName("file_path");
            entity.Property(e => e.SubmitedDate)
                .HasDefaultValueSql("now()")
                .HasColumnName("submited_date");
            entity.Property(e => e.TeamMilestoneId).HasColumnName("team_milestone_id");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .HasColumnName("type");

            entity.HasOne(d => d.ClassMember).WithMany(p => p.MilestoneReturns)
                .HasForeignKey(d => d.ClassMemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("milestone_return_class_member_fk");

            entity.HasOne(d => d.TeamMilestone).WithMany(p => p.MilestoneReturns)
                .HasForeignKey(d => d.TeamMilestoneId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("milestone_return_team_milestone_fk");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("notification_pk");

            entity.ToTable("notification");

            entity.Property(e => e.NotificationId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("notification_id");
            entity.Property(e => e.Content).HasColumnName("content");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.Link).HasColumnName("link");
            entity.Property(e => e.NotificationType).HasColumnName("notification_type");
            entity.Property(e => e.ReferenceId).HasColumnName("reference_id");
            entity.Property(e => e.ReferenceType)
                .HasMaxLength(50)
                .HasColumnName("reference_type");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("title");
        });

        modelBuilder.Entity<NotificationRecipient>(entity =>
        {
            entity.HasKey(e => e.NotificationRecipientId).HasName("notification_recipient_pk");

            entity.ToTable("notification_recipient");

            entity.Property(e => e.NotificationRecipientId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("notification_recipient_id");
            entity.Property(e => e.IsRead)
                .HasDefaultValue(false)
                .HasColumnName("is_read");
            entity.Property(e => e.NotificationId).HasColumnName("notification_id");
            entity.Property(e => e.ReadAt).HasColumnName("read_at");
            entity.Property(e => e.ReceiverId).HasColumnName("receiver_id");

            entity.HasOne(d => d.Notification).WithMany(p => p.NotificationRecipients)
                .HasForeignKey(d => d.NotificationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("notification_recipient_notification_fk");

            entity.HasOne(d => d.Receiver).WithMany(p => p.NotificationRecipients)
                .HasForeignKey(d => d.ReceiverId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("notification_recipient_user_fk");
        });

        modelBuilder.Entity<Objective>(entity =>
        {
            entity.HasKey(e => e.ObjectiveId).HasName("objective_pk");

            entity.ToTable("objective");

            entity.Property(e => e.ObjectiveId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("objective_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Priority).HasColumnName("priority");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");

            entity.HasOne(d => d.Project).WithMany(p => p.Objectives)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("objective_project_fk");
        });

        modelBuilder.Entity<ObjectiveMilestone>(entity =>
        {
            entity.HasKey(e => e.ObjectiveMilestoneId).HasName("objective_milestone_pk");

            entity.ToTable("objective_milestone");

            entity.Property(e => e.ObjectiveMilestoneId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("objective_milestone_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.ObjectiveId).HasColumnName("objective_id");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("title");

            entity.HasOne(d => d.Objective).WithMany(p => p.ObjectiveMilestones)
                .HasForeignKey(d => d.ObjectiveId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("objective_milestone_objective_fk");
        });

        modelBuilder.Entity<Project>(entity =>
        {
            entity.HasKey(e => e.ProjectId).HasName("project_pk");

            entity.ToTable("project");

            entity.Property(e => e.ProjectId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("project_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_at");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.LecturerId).HasColumnName("lecturer_id");
            entity.Property(e => e.ProjectName)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("project_name");
            entity.Property(e => e.Status)
                .HasComment("0 - Pending,\r\n1 - Approved,\r\n2 - Denied")
                .HasColumnName("status");
            entity.Property(e => e.SubjectId).HasColumnName("subject_id");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("now()")
                .HasColumnName("updated_at");
            entity.Property(e => e.UpdatedBy).HasColumnName("updated_by");

            entity.HasOne(d => d.Lecturer).WithMany(p => p.Projects)
                .HasForeignKey(d => d.LecturerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("project_lecturer_fk");

            entity.HasOne(d => d.Subject).WithMany(p => p.Projects)
                .HasForeignKey(d => d.SubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("project_subject_fk");
        });

        modelBuilder.Entity<ProjectAssignment>(entity =>
        {
            entity.HasKey(e => e.ProjectAssignmentId).HasName("project_assignment_pk");

            entity.ToTable("project_assignment");

            entity.Property(e => e.ProjectAssignmentId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("project_assignment_id");
            entity.Property(e => e.AssignedDate)
                .HasDefaultValueSql("now()")
                .HasColumnName("assigned_date");
            entity.Property(e => e.ClassId).HasColumnName("class_id");
            entity.Property(e => e.ProjectId).HasColumnName("project_id");
            entity.Property(e => e.Status).HasColumnName("status");

            entity.HasOne(d => d.Class).WithMany(p => p.ProjectAssignments)
                .HasForeignKey(d => d.ClassId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("project_assignment_class_fk");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectAssignments)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("project_assignment_project_fk");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("role_pk");

            entity.ToTable("role");

            entity.Property(e => e.RoleId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("role_id");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("role_name");
        });

        modelBuilder.Entity<Semester>(entity =>
        {
            entity.HasKey(e => e.SemesterId).HasName("semester_pk");

            entity.ToTable("semester");

            entity.Property(e => e.SemesterId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("semester_id");
            entity.Property(e => e.SemesterName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("semester_name");
            entity.Property(e => e.SemesterCode)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("semester_code");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
        });

        modelBuilder.Entity<Shape>(entity =>
        {
            entity.HasKey(e => e.ShapeId).HasName("shape_pk");

            entity.ToTable("shape");

            entity.Property(e => e.ShapeId).HasColumnName("shape_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.DrawerId).HasColumnName("drawer_id");
            entity.Property(e => e.JsonData)
                .HasColumnType("jsonb")
                .HasColumnName("json_data");
            entity.Property(e => e.PageId).HasColumnName("page_id");

            entity.HasOne(d => d.Page).WithMany(p => p.Shapes)
                .HasForeignKey(d => d.PageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("shape_whiteboard_page_fk");
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.HasKey(e => e.StudentId).HasName("student_pk");

            entity.ToTable("student");

            entity.Property(e => e.StudentId)
                .ValueGeneratedNever()
                .HasColumnName("student_id");
            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.AvatarImg).HasColumnName("avatar_img");
            entity.Property(e => e.Fullname)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("fullname");
            entity.Property(e => e.Major).HasColumnName("major");
            entity.Property(e => e.PhoneNumber).HasColumnName("phone_number");
            entity.Property(e => e.School).HasColumnName("school");
            entity.Property(e => e.StudentCode)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("student_code");
            entity.Property(e => e.Yob).HasColumnName("yob");

            entity.HasOne(d => d.StudentNavigation).WithOne(p => p.Student)
                .HasForeignKey<Student>(d => d.StudentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("student_user_fk");
        });

        modelBuilder.Entity<SubTask>(entity =>
        {
            entity.HasKey(e => e.SubTaskId).HasName("sub_task_pk");

            entity.ToTable("sub_task");

            entity.Property(e => e.SubTaskId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("sub_task_id");
            entity.Property(e => e.IsDone).HasColumnName("is_done");
            entity.Property(e => e.SubTaskTitle).HasColumnName("sub_task_title");
            entity.Property(e => e.TaskId).HasColumnName("task_id");

            entity.HasOne(d => d.Task).WithMany(p => p.SubTasks)
                .HasForeignKey(d => d.TaskId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("sub_task_task_fk");
        });

        modelBuilder.Entity<Subject>(entity =>
        {
            entity.HasKey(e => e.SubjectId).HasName("subject_pk");

            entity.ToTable("subject");

            entity.Property(e => e.SubjectId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("subject_id");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.SubjectCode)
                .IsRequired()
                .HasMaxLength(40)
                .HasColumnName("subject_code");
            entity.Property(e => e.SubjectName)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("subject_name");
        });

        modelBuilder.Entity<SubjectGradeComponent>(entity =>
        {
            entity.HasKey(e => e.SubjectGradeComponentId).HasName("subject_grade_component_pk");

            entity.ToTable("subject_grade_component");

            entity.Property(e => e.SubjectGradeComponentId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("subject_grade_component_id");
            entity.Property(e => e.ComponentName)
                .IsRequired()
                .HasMaxLength(80)
                .HasColumnName("component_name");
            entity.Property(e => e.ReferencePercentage).HasColumnName("reference_percentage");
            entity.Property(e => e.SubjectId).HasColumnName("subject_id");
            entity.Property(e => e.SyllabusId).HasColumnName("syllabus_id");

            entity.HasOne(d => d.Syllabus).WithMany(p => p.SubjectGradeComponents)
                .HasForeignKey(d => d.SyllabusId)
                .HasConstraintName("subject_grade_component_subject_syllabus_fk");
        });

        modelBuilder.Entity<SubjectOutcome>(entity =>
        {
            entity.HasKey(e => e.SubjectOutcomeId).HasName("subject_outcome_pk");

            entity.ToTable("subject_outcome");

            entity.Property(e => e.SubjectOutcomeId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("subject_outcome_id");
            entity.Property(e => e.OutcomeDetail)
                .IsRequired()
                .HasColumnName("outcome_detail");
            entity.Property(e => e.SyllabusId).HasColumnName("syllabus_id");

            entity.HasOne(d => d.Syllabus).WithMany(p => p.SubjectOutcomes)
                .HasForeignKey(d => d.SyllabusId)
                .HasConstraintName("subject_outcome_subject_syllabus_fk");
        });

        modelBuilder.Entity<SubjectSyllabus>(entity =>
        {
            entity.HasKey(e => e.SyllabusId).HasName("subject_syllabus_pk");

            entity.ToTable("subject_syllabus");

            entity.Property(e => e.SyllabusId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("syllabus_id");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.NoCredit).HasColumnName("no_credit");
            entity.Property(e => e.SubjectCode)
                .IsRequired()
                .HasMaxLength(40)
                .HasColumnName("subject_code");
            entity.Property(e => e.SubjectId).HasColumnName("subject_id");
            entity.Property(e => e.SyllabusName)
                .IsRequired()
                .HasColumnName("syllabus_name");

            entity.HasOne(d => d.Subject).WithMany(p => p.SubjectSyllabi)
                .HasForeignKey(d => d.SubjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("subject_syllabus_subject_fk");
        });

        modelBuilder.Entity<Domain.Models.Task>(entity =>
        {
            entity.HasKey(e => e.TaskId).HasName("task_pk");

            entity.ToTable("task");

            entity.Property(e => e.TaskId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("task_id");
            entity.Property(e => e.CardId).HasColumnName("card_id");
            entity.Property(e => e.TaskTitle).HasColumnName("task_title");

            entity.HasOne(d => d.Card).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.CardId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("task_card_fk");
        });

        modelBuilder.Entity<Team>(entity =>
        {
            entity.HasKey(e => e.TeamId).HasName("team_pk");

            entity.ToTable("team");

            entity.Property(e => e.TeamId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("team_id");
            entity.Property(e => e.ClassId).HasColumnName("class_id");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_date");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.EnrolKey)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("enrol_key");
            entity.Property(e => e.GitLink).HasColumnName("git_link");
            entity.Property(e => e.LeaderId).HasColumnName("leader_id");
            entity.Property(e => e.LecturerId).HasColumnName("lecturer_id");
            entity.Property(e => e.LecturerName)
                .HasMaxLength(150)
                .HasColumnName("lecturer_name");
            entity.Property(e => e.Progress).HasColumnName("progress");
            entity.Property(e => e.ProjectAssignmentId).HasColumnName("project_assignment_id");
            entity.Property(e => e.Status)
                .HasComment("1 - valid, 2 - invalid")
                .HasColumnName("status");
            entity.Property(e => e.TeamImage).HasColumnName("team_image");
            entity.Property(e => e.TeamName)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("team_name");

            entity.HasOne(d => d.Class).WithMany(p => p.Teams)
                .HasForeignKey(d => d.ClassId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("team_class_fk");

            entity.HasOne(d => d.ProjectAssignment).WithMany(p => p.Teams)
                .HasForeignKey(d => d.ProjectAssignmentId)
                .HasConstraintName("team_project_assignment_fk");
        });

        modelBuilder.Entity<TeamEvaluation>(entity =>
        {
            entity.HasKey(e => e.TeamEvaluationId).HasName("team_evaluation_pk");

            entity.ToTable("team_evaluation");

            entity.Property(e => e.TeamEvaluationId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("team_evaluation_id");
            entity.Property(e => e.Comment).HasColumnName("comment");
            entity.Property(e => e.FinalGrade).HasColumnName("final_grade");
            entity.Property(e => e.LecturerId).HasColumnName("lecturer_id");
            entity.Property(e => e.TeamId).HasColumnName("team_id");

            entity.HasOne(d => d.Lecturer).WithMany(p => p.TeamEvaluations)
                .HasForeignKey(d => d.LecturerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("team_evaluation_lecturer_fk");

            entity.HasOne(d => d.Team).WithMany(p => p.TeamEvaluations)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("team_evaluation_team_fk");
        });

        modelBuilder.Entity<TeamFile>(entity =>
        {
            entity.HasKey(e => e.FileId).HasName("team_file_pk");

            entity.ToTable("team_file");

            entity.Property(e => e.FileId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("file_id");
            entity.Property(e => e.FilePath)
                .IsRequired()
                .HasColumnName("file_path");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .HasColumnName("type");

            entity.HasOne(d => d.Team).WithMany(p => p.TeamFiles)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("team_file_team_fk");
        });

        modelBuilder.Entity<TeamMilestone>(entity =>
        {
            entity.HasKey(e => e.TeamMilestoneId).HasName("team_milestone_pk");

            entity.ToTable("team_milestone");

            entity.Property(e => e.TeamMilestoneId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("team_milestone_id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.EndDate).HasColumnName("end_date");
            entity.Property(e => e.ObjectiveMilestoneId).HasColumnName("objective_milestone_id");
            entity.Property(e => e.Progress).HasColumnName("progress");
            entity.Property(e => e.StartDate).HasColumnName("start_date");
            entity.Property(e => e.Status)
                .HasComment("0 - not done , 1 - done")
                .HasColumnName("status");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(150)
                .HasColumnName("title");

            entity.HasOne(d => d.ObjectiveMilestone).WithMany(p => p.TeamMilestones)
                .HasForeignKey(d => d.ObjectiveMilestoneId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("team_milestone_objective_milestone_fk");

            entity.HasOne(d => d.Team).WithMany(p => p.TeamMilestones)
                .HasForeignKey(d => d.TeamId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("team_milestone_team_fk");
        });

        modelBuilder.Entity<TeamWhiteboard>(entity =>
        {
            entity.HasKey(e => e.WhiteboardId).HasName("team_whiteboard_pk");

            entity.ToTable("team_whiteboard");

            entity.Property(e => e.WhiteboardId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("whiteboard_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
        });

        modelBuilder.Entity<TeamWorkspace>(entity =>
        {
            entity.HasKey(e => e.WorkspaceId).HasName("team_workspace_pk");

            entity.ToTable("team_workspace");

            entity.Property(e => e.WorkspaceId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("workspace_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.TeamId).HasColumnName("team_id");
            entity.Property(e => e.Title).HasColumnName("title");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UId).HasName("user_pk");

            entity.ToTable("user");

            entity.Property(e => e.UId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("u_id");
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("now()")
                .HasColumnName("created_date");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(254)
                .HasColumnName("email");
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true)
                .HasColumnName("is_active");
            entity.Property(e => e.IsTeacher)
                .HasDefaultValue(false)
                .HasColumnName("is_teacher");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasColumnName("password");
            entity.Property(e => e.RefreshToken).HasColumnName("refresh_token");
            entity.Property(e => e.RefreshTokenExpiryTime).HasColumnName("refresh_token_expiry_time");
            entity.Property(e => e.RoleId).HasColumnName("role_id");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("user_role_fk");
        });

        modelBuilder.Entity<WhiteboardPage>(entity =>
        {
            entity.HasKey(e => e.PageId).HasName("whiteboard_page_pk");

            entity.ToTable("whiteboard_page");

            entity.Property(e => e.PageId)
                .UseIdentityAlwaysColumn()
                .HasColumnName("page_id");
            entity.Property(e => e.CreatedAt).HasColumnName("created_at");
            entity.Property(e => e.IsActivate)
                .HasDefaultValue(true)
                .HasColumnName("is_activate");
            entity.Property(e => e.PageTitle).HasColumnName("page_title");
            entity.Property(e => e.WhiteboardId).HasColumnName("whiteboard_id");

            entity.HasOne(d => d.Whiteboard).WithMany(p => p.WhiteboardPages)
                .HasForeignKey(d => d.WhiteboardId)
                .HasConstraintName("whiteboard_page_team_whiteboard_fk");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}